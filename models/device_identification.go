// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceIdentification Read-only identification attributes.
//
// swagger:model DeviceIdentification
type DeviceIdentification struct {

	// Device is added to UNMS.
	Authorized bool `json:"authorized,omitempty"`

	// category
	// Enum: [optical wired wireless accessories]
	Category string `json:"category,omitempty"`

	// UNMS device alias or real name.
	DisplayName string `json:"displayName,omitempty"`

	// In SemVer format.
	FirmwareVersion string `json:"firmwareVersion,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// Device ID.
	// Example: f7ac9cad-ea28-4390-93c8-7add010e8ee3
	// Required: true
	ID *string `json:"id"`

	// Custom IP address in IPv4 or IPv6 format.
	// Example: 192.168.1.22
	IP string `json:"ip,omitempty"`

	// mac
	// Pattern: ^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$
	Mac string `json:"mac,omitempty"`

	// Short names, for example UF-OLT.
	Model string `json:"model,omitempty"`

	// Full names, for example UFiber OLT.
	ModelName string `json:"modelName,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Short name, for example e600.
	PlatformID string `json:"platformId,omitempty"`

	// platform name
	PlatformName string `json:"platformName,omitempty"`

	// role
	// Enum: [router switch gpon ap station other ups server wireless convertor gateway]
	Role string `json:"role,omitempty"`

	// serial number
	SerialNumber string `json:"serialNumber,omitempty"`

	// site
	Site *Site `json:"site,omitempty"`

	// started
	// Format: date-time
	Started strfmt.DateTime `json:"started,omitempty"`

	// Status of the station.
	// Example: active
	// Enum: [active connecting discovered inactive disabled disconnected unauthorized proposed unknown unplaced custom]
	Status string `json:"status,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// wan interface Id
	WanInterfaceID string `json:"wanInterfaceId,omitempty"`
}

// Validate validates this device identification
func (m *DeviceIdentification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMac(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStarted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deviceIdentificationTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["optical","wired","wireless","accessories"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceIdentificationTypeCategoryPropEnum = append(deviceIdentificationTypeCategoryPropEnum, v)
	}
}

const (

	// DeviceIdentificationCategoryOptical captures enum value "optical"
	DeviceIdentificationCategoryOptical string = "optical"

	// DeviceIdentificationCategoryWired captures enum value "wired"
	DeviceIdentificationCategoryWired string = "wired"

	// DeviceIdentificationCategoryWireless captures enum value "wireless"
	DeviceIdentificationCategoryWireless string = "wireless"

	// DeviceIdentificationCategoryAccessories captures enum value "accessories"
	DeviceIdentificationCategoryAccessories string = "accessories"
)

// prop value enum
func (m *DeviceIdentification) validateCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceIdentificationTypeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceIdentification) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

func (m *DeviceIdentification) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DeviceIdentification) validateMac(formats strfmt.Registry) error {
	if swag.IsZero(m.Mac) { // not required
		return nil
	}

	if err := validate.Pattern("mac", "body", m.Mac, `^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$|^([0-9a-fA-F]){12}$`); err != nil {
		return err
	}

	return nil
}

var deviceIdentificationTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["router","switch","gpon","ap","station","other","ups","server","wireless","convertor","gateway"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceIdentificationTypeRolePropEnum = append(deviceIdentificationTypeRolePropEnum, v)
	}
}

const (

	// DeviceIdentificationRoleRouter captures enum value "router"
	DeviceIdentificationRoleRouter string = "router"

	// DeviceIdentificationRoleSwitch captures enum value "switch"
	DeviceIdentificationRoleSwitch string = "switch"

	// DeviceIdentificationRoleGpon captures enum value "gpon"
	DeviceIdentificationRoleGpon string = "gpon"

	// DeviceIdentificationRoleAp captures enum value "ap"
	DeviceIdentificationRoleAp string = "ap"

	// DeviceIdentificationRoleStation captures enum value "station"
	DeviceIdentificationRoleStation string = "station"

	// DeviceIdentificationRoleOther captures enum value "other"
	DeviceIdentificationRoleOther string = "other"

	// DeviceIdentificationRoleUps captures enum value "ups"
	DeviceIdentificationRoleUps string = "ups"

	// DeviceIdentificationRoleServer captures enum value "server"
	DeviceIdentificationRoleServer string = "server"

	// DeviceIdentificationRoleWireless captures enum value "wireless"
	DeviceIdentificationRoleWireless string = "wireless"

	// DeviceIdentificationRoleConvertor captures enum value "convertor"
	DeviceIdentificationRoleConvertor string = "convertor"

	// DeviceIdentificationRoleGateway captures enum value "gateway"
	DeviceIdentificationRoleGateway string = "gateway"
)

// prop value enum
func (m *DeviceIdentification) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceIdentificationTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceIdentification) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

func (m *DeviceIdentification) validateSite(formats strfmt.Registry) error {
	if swag.IsZero(m.Site) { // not required
		return nil
	}

	if m.Site != nil {
		if err := m.Site.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceIdentification) validateStarted(formats strfmt.Registry) error {
	if swag.IsZero(m.Started) { // not required
		return nil
	}

	if err := validate.FormatOf("started", "body", "date-time", m.Started.String(), formats); err != nil {
		return err
	}

	return nil
}

var deviceIdentificationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","connecting","discovered","inactive","disabled","disconnected","unauthorized","proposed","unknown","unplaced","custom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceIdentificationTypeStatusPropEnum = append(deviceIdentificationTypeStatusPropEnum, v)
	}
}

const (

	// DeviceIdentificationStatusActive captures enum value "active"
	DeviceIdentificationStatusActive string = "active"

	// DeviceIdentificationStatusConnecting captures enum value "connecting"
	DeviceIdentificationStatusConnecting string = "connecting"

	// DeviceIdentificationStatusDiscovered captures enum value "discovered"
	DeviceIdentificationStatusDiscovered string = "discovered"

	// DeviceIdentificationStatusInactive captures enum value "inactive"
	DeviceIdentificationStatusInactive string = "inactive"

	// DeviceIdentificationStatusDisabled captures enum value "disabled"
	DeviceIdentificationStatusDisabled string = "disabled"

	// DeviceIdentificationStatusDisconnected captures enum value "disconnected"
	DeviceIdentificationStatusDisconnected string = "disconnected"

	// DeviceIdentificationStatusUnauthorized captures enum value "unauthorized"
	DeviceIdentificationStatusUnauthorized string = "unauthorized"

	// DeviceIdentificationStatusProposed captures enum value "proposed"
	DeviceIdentificationStatusProposed string = "proposed"

	// DeviceIdentificationStatusUnknown captures enum value "unknown"
	DeviceIdentificationStatusUnknown string = "unknown"

	// DeviceIdentificationStatusUnplaced captures enum value "unplaced"
	DeviceIdentificationStatusUnplaced string = "unplaced"

	// DeviceIdentificationStatusCustom captures enum value "custom"
	DeviceIdentificationStatusCustom string = "custom"
)

// prop value enum
func (m *DeviceIdentification) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceIdentificationTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceIdentification) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DeviceIdentification) validateUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this device identification based on the context it is used
func (m *DeviceIdentification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceIdentification) contextValidateSite(ctx context.Context, formats strfmt.Registry) error {

	if m.Site != nil {
		if err := m.Site.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("site")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("site")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceIdentification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceIdentification) UnmarshalBinary(b []byte) error {
	var res DeviceIdentification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
